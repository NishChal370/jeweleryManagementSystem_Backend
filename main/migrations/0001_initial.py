# Generated by Django 4.0 on 2022-04-01 08:44

import datetime
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import main.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Bill',
            fields=[
                ('billId', models.AutoField(primary_key=True, serialize=False)),
                ('date', models.DateField(default=django.utils.timezone.now)),
                ('rate', models.FloatField(blank=True, null=True)),
                ('billType', models.CharField(choices=[('gold', 'GOLD'), ('silver', 'SILVER')], default='gold', max_length=11)),
                ('customerProductWeight', models.FloatField(blank=True, default=0, null=True)),
                ('customerProductAmount', models.FloatField(blank=True, null=True)),
                ('finalWeight', models.FloatField(blank=True, null=True)),
                ('grandTotalWeight', models.FloatField(blank=True, null=True)),
                ('totalAmount', models.FloatField(null=True)),
                ('discount', models.FloatField(blank=True, null=True)),
                ('grandTotalAmount', models.FloatField(null=True)),
                ('advanceAmount', models.FloatField(blank=True, null=True)),
                ('payedAmount', models.FloatField(blank=True, null=True)),
                ('remainingAmount', models.FloatField(blank=True, null=True)),
                ('status', models.CharField(choices=[('draft', 'DRAFT'), ('submitted', 'SUBMITTED')], default='submitted', max_length=11)),
                ('qr_code', models.ImageField(blank=True, upload_to='qr_code')),
            ],
        ),
        migrations.CreateModel(
            name='Customer',
            fields=[
                ('customerId', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50)),
                ('address', models.CharField(max_length=50)),
                ('phone', models.CharField(blank=True, max_length=10, null=True)),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('orderId', models.AutoField(primary_key=True, serialize=False)),
                ('date', models.DateField(default=django.utils.timezone.now)),
                ('rate', models.FloatField(blank=True, null=True)),
                ('advanceAmount', models.FloatField(blank=True, null=True)),
                ('submittionDate', models.DateField(blank=True)),
                ('submittedDate', models.DateField(blank=True, null=True)),
                ('remark', models.TextField(blank=True, null=True)),
                ('customerProductWeight', models.FloatField(blank=True, null=True)),
                ('type', models.CharField(choices=[('gold', 'GOLD'), ('silver', 'SILVER')], default='gold', max_length=11)),
                ('status', models.CharField(choices=[('pending', 'PENDING'), ('inprogress', 'INPROGRESS'), ('completed', 'COMPLETED'), ('submitted', 'SUBMITTED')], default='pending', max_length=11)),
                ('customerId', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='orders', to='main.customer')),
            ],
        ),
        migrations.CreateModel(
            name='OrderProduct',
            fields=[
                ('orderProductId', models.AutoField(primary_key=True, serialize=False)),
                ('totalWeight', models.FloatField(blank=True, null=True)),
                ('status', models.CharField(choices=[('pending', 'PENDING'), ('inprogress', 'INPROGRESS'), ('completed', 'COMPLETED')], default='pending', max_length=11)),
                ('design', models.ImageField(blank=True, null=True, upload_to='images')),
                ('quantity', models.FloatField(blank=True, default=1, null=True)),
                ('orderId', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='orderProducts', to='main.order')),
            ],
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('productId', models.AutoField(primary_key=True, serialize=False)),
                ('productName', models.CharField(max_length=50)),
                ('netWeight', models.FloatField(blank=True, null=True)),
                ('size', models.FloatField(blank=True, default=0, null=True)),
                ('gemsName', models.CharField(blank=True, max_length=50, null=True)),
                ('gemsPrice', models.FloatField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Rate',
            fields=[
                ('rateId', models.AutoField(primary_key=True, serialize=False)),
                ('date', models.DateField(blank=True, default=datetime.date(2022, 4, 1), null=True)),
                ('hallmarkRate', models.FloatField()),
                ('tajabiRate', models.FloatField()),
                ('silverRate', models.FloatField()),
            ],
        ),
        migrations.CreateModel(
            name='Staff',
            fields=[
                ('staffId', models.AutoField(primary_key=True, serialize=False)),
                ('staffName', models.CharField(max_length=50)),
                ('address', models.CharField(max_length=50)),
                ('phone', models.CharField(blank=True, max_length=10, null=True)),
                ('email', models.EmailField(blank=True, max_length=50, null=True)),
                ('registrationDate', models.DateField(blank=True, default=datetime.date(2022, 4, 1), null=True)),
                ('resignDate', models.DateField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='StaffWork',
            fields=[
                ('staffWorkId', models.AutoField(primary_key=True, serialize=False)),
                ('date', models.DateField(blank=True, default=datetime.date(2022, 4, 1), null=True)),
                ('givenWeight', models.FloatField()),
                ('KDMWeight', models.FloatField()),
                ('totalWeight', models.FloatField()),
                ('submittionDate', models.DateField(blank=True, null=True)),
                ('submittedWeight', models.FloatField(blank=True, null=True)),
                ('finalProductWeight', models.FloatField(blank=True, null=True)),
                ('lossWeight', models.FloatField(blank=True, null=True)),
                ('submittedDate', models.DateField(blank=True, null=True)),
                ('status', models.CharField(choices=[('inprogress', 'INPROGRESS'), ('completed', 'COMPLETED')], default='inprogress', max_length=11)),
                ('orderProduct', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='orderProduct', to='main.orderproduct')),
                ('staff', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='staffwork', to='main.staff')),
            ],
        ),
        migrations.AddField(
            model_name='orderproduct',
            name='productId',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='orderProduct', to='main.product'),
        ),
        migrations.CreateModel(
            name='BillProduct',
            fields=[
                ('billProductId', models.AutoField(primary_key=True, serialize=False)),
                ('lossWeight', models.FloatField(blank=True, null=True)),
                ('totalWeight', models.FloatField(blank=True, null=True)),
                ('quantity', models.FloatField(blank=True, default=1, null=True)),
                ('rate', models.FloatField(blank=True, null=True)),
                ('makingCharge', models.FloatField(blank=True, null=True)),
                ('totalAmountPerProduct', models.FloatField(blank=True, null=True)),
                ('billId', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='billProduct', to='main.bill')),
                ('productId', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='product', to='main.product')),
            ],
        ),
        migrations.AddField(
            model_name='bill',
            name='customerId',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='bills', to='main.customer'),
        ),
        migrations.AddField(
            model_name='bill',
            name='orderId',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='orders', to='main.order'),
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('full_name', models.CharField(blank=True, max_length=30, null=True)),
                ('pan_number', models.FloatField(blank=True, null=True)),
                ('phone', models.FloatField(blank=True, null=True)),
                ('profileImage', models.ImageField(blank=True, null=True, upload_to=main.models.upload_to)),
                ('register_date', models.DateField(blank=True, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
